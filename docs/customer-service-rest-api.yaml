openapi: 3.1.0
info:
  title: Customer Service REST API
  version: ''
  summary: Customer Service REST API
  contact:
    url: 'https://github.com/vincenzocorso'
    email: vincenzocorso99@gmail.com
    name: Vincenzo Corso
  description: ''
servers:
  - url: 'http://customer-service:8080'
paths:
  /customers:
    post:
      summary: RegisterCustomer
      operationId: register-customer
      description: Registers a new customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDetails'
      responses:
        '201':
          description: Returns the created customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: A validation error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    parameters: []
    get:
      summary: GetCustomers
      operationId: get-customers
      description: Gets all customers
      parameters:
        - schema:
            type: integer
            minimum: 1
            default: 10
            maximum: 200
          in: query
          name: limit
          description: The number of results returned
        - schema:
            type: integer
            minimum: 0
            default: 0
          in: query
          name: offset
          description: The number of result to omit from the beginning
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              examples:
                Customers:
                  value:
                    - firstName: Marco
                      lastName: Rossi
                      dateOfBirth: '1997-10-31'
                      fiscalCode: RSSMRC97R31G273U
                      email: marcorossi97@gmail.com
                      phoneNumber: '+393278965245'
                      driverLicense:
                        licenseNumber: AB123FR
                        issueDate: '2017-05-09'
                        expiryDate: '2027-12-05'
                        isVerified: true
                      customerId: CST000ABD123
                      emailVerified: true
  '/customers/{customerId}':
    parameters:
      - schema:
          type: string
        name: customerId
        in: path
        required: true
        description: The customer id
    get:
      summary: GetCustomer
      tags: []
      operationId: get-customer
      description: Gets a customer with the given id
      responses:
        '200':
          description: Returns the customer with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: The customer was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Customer:
      title: Customer
      description: ''
      examples:
        - firstName: Marco
          lastName: Rossi
          dateOfBirth: '1997-10-31'
          fiscalCode: RSSMRC97R31G273U
          email: marcorossi97@gmail.com
          phoneNumber: '+393278965245'
          driverLicense:
            licenseNumber: AB123FR
            issueDate: '2017-05-09'
            expiryDate: '2027-12-05'
          customerId: CST000ABD123
          emailVerified: true
          driverLicenseVerified: true
      allOf:
        - $ref: '#/components/schemas/CustomerDetails'
        - type: object
          properties:
            customerId:
              type: string
              description: The customer id
              example: CST000ABD123
            emailVerified:
              type: boolean
              description: 'True if the email has been verified, false otherwise'
    CustomerDetails:
      title: CustomerDetails
      type: object
      examples:
        - firstName: Marco
          lastName: Rossi
          dateOfBirth: '1997-10-31'
          fiscalCode: RSSMRC97R31G273U
          email: marcorossi97@gmail.com
          phoneNumber: '+393278965245'
          driverLicense:
            licenseNumber: AB123FR
            issueDate: '2017-05-09'
            expiryDate: '2027-12-05'
      properties:
        firstName:
          type: string
          description: The customer first name
          example: Marco
        lastName:
          type: string
          description: The customer last name
          example: Rossi
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
          description: The date of birth of the customer
        fiscalCode:
          type: string
          description: The customer fiscal code
          example: RSSMRC97R31G273U
        email:
          type: string
          format: email
          description: The customer email
          example: marcorossi97@gmail.com
        phoneNumber:
          type: string
          description: The customer phone number
          example: '+393278965245'
        driverLicense:
          $ref: '#/components/schemas/DriverLicense'
    DriverLicense:
      title: DriverLicense
      type: object
      examples:
        - licenseNumber: AB123FR
          issueDate: '2017-05-09'
          expiryDate: '2027-12-05'
      properties:
        licenseNumber:
          type: string
          description: The driver license number
          example: AB123FR
        issueDate:
          type: string
          description: The driver license issue date
          format: date
          example: '2017-05-09'
        expiryDate:
          type: string
          description: The driver license expiry date
          format: date
          example: '2027-12-05'
    ErrorResponse:
      title: ErrorResponse
      type: object
      x-examples:
        ValidationError:
          value:
            type: VALIDATION_ERROR
            message: A validation error occurred in the request body.
            issues:
              - name: customerId
                description: The customer id must be not null
      examples:
        - type: VALIDATION_ERROR
          message: A validation error occurred in the request body
          issues:
            - name: firstName
              description: firstName must not be null
      properties:
        type:
          type: string
          description: The error type
          example: VALIDATION_ERROR
        message:
          type: string
          description: A message explaining the error
          example: A validation error occurred in the request body
        issues:
          type: array
          description: The list of occurred issues
          items:
            type: object
            properties:
              name:
                type: string
                description: The issue name
                example: firstName
              description:
                type: string
                description: The issue description
                example: firstName must not be null
  responses: {}
